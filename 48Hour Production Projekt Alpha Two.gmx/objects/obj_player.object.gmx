<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.pressed_jump = false;
self.pressed_left = false;
self.pressed_right = false;
self.name = "";
/*
if (htme_isLocal()) {
    /** Totro generates random names and is not part of the main engine, it's
      * another marketplace asset by me :)
      */
   /*var ttr = totro(5,7,1);
    self.name = ttr[0];
    /* Gives this player a random color. */
   /* self.image_blend = irandom(16777215);
}
*/
walkingspeed = 1;
maxspeed = 5;
lookdirection = 1;
instances[0] = 0;
ic = 0;
trapped = 0;
untrap = 0;

inventory[0,0] = 0
inventory[1,0] = 0
inventory[2,0] = 0
inventory[3,0] = 0
inventory[4,0] = 0
inventory[5,0] = 0
inventory[6,0] = 0
inventory[7,0] = 0
inventory[8,0] = 0


//set amount to 0
inventory[0,1] = 0
inventory[1,1] = 0
inventory[2,1] = 0
inventory[3,1] = 0
inventory[4,1] = 0
inventory[5,1] = 0
inventory[6,1] = 0
inventory[7,1] = 0
inventory[8,1] = 0

var base_w = 1920;
var base_h = 1080;
var max_w = display_get_width();
var max_h = display_get_height();
var aspect = display_get_width() / display_get_height();
var global.VIEW_HEIGHT = 0;
var global.VIEW_WIDTH = 0;
if (max_w &lt; max_h)
    {
    // portait
    global.VIEW_WIDTH = min(base_w, max_w);
    global.VIEW_HEIGHT = global.VIEW_WIDTH / aspect;
    }
else
    {
    // landscape
    global.VIEW_HEIGHT = min(base_h, max_h);
    global.VIEW_WIDTH = global.VIEW_HEIGHT * aspect;
    }
    
    
global.activeinv = 0;    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ADD TO GMnet ENGINE
/**
  * Starts syncing.
  * Everything in this script MUST only be run in the create event and at the very beginning.
  */
mp_sync();
/**
 * Tell the engine to add the position:
 * x,y
 * These variables will be synced as part of a so called "variable group".
 * It will be called "Pos" and syncs it every 5 seconds.
 * We sync the position every 5 seconds to prevent the players from desyncing.
 */
mp_addPosition("Pos",1*room_speed);
/**
  * Change the sync mode to be SMART.
  * This means that the packets get definitely delivered, this "emulates" the 
  * reliability of TCP.
  * And it also only syncs if the variable has changed since the last sync.
  * Please note that this is not that fast and should not be executed for the same group
  * in a short time, so set a big delay!
  */
mp_setType("Pos",mp_type.SMART);
/**
  * Adds a tolerance of 20 to the Pos group (x and y position).
  * This meand when a client recieves the position update, it will only sync it, if the
  * local x and y position are 20 pixels more/less than the actual position.
  * Since we sync the position to avoid desync, a low number means the player might "flicker" every
  * time the position is recieved, because it slightly changes it.
  * We only want to change it if the client is significantly away from the player, so it get's 
  * corrected.
  */
mp_tolerance("Pos",2);


/**
 * Tell the engine to add the basic drawing variables:
 * image_alpha,image_angle,image_blend,image_index,image_speed,image_xscale
 * image_yscale,visible
 * This is mostly to sync the xscale (the direction the player faces in) and the color in this demo.
 * Also synced for the same reason as the position: To avoid desync.
 */
mp_addBuiltinBasic("basicDrawing",15*room_speed);
mp_setType("basicDrawing",mp_type.SMART);

/**
 * Tell the engine to add the builtin GameMaker variables:
 * direction,gravity,gravity_direction,friction,hspeed,vspeed
 * Sync the entire physics. Also to avoid desync.
 */
mp_addBuiltinPhysics("basicPhysics",15*room_speed);
mp_setType("basicPhysics",mp_type.SMART);

/**
 * This adds two custom groups that sync the variables 
 * name,pressed_jump,pressed_left,pressed_right
 *
 * SADLY, due to current limitations in GML, we can't access any of this variables by their
 * name in the engine. You need to add their values to a special list in begin step and
 * retrieve them in end step. Go to these events in this demo object and you'll see.
 *
 * Name is synced to update the name (obviously) and is sent SMART and with great delay between the
 * syncs, since it shouldn't actually sync at all. At this point we should note, that all variable
 * groups also get synced automatically when needed, for example if someone connects or changes room.
 *
 * The second group syncs the controls every step, this is the important part, this is what actually
 * moves the player.
 *
 * Since no type was changed, the default type FAST is chosen, this means packets get sent
 * only once, but very fast.
 * This however means, that the other clients could desync, that's why we sync position and physics.
 *
 * The third argument specifys the type of the variables. See
 * http://docs.yoyogames.com/source/dadiospice/002_reference/buffers/buffer_read.html
 * for all options
 */
mp_add("playerName","name",buffer_string,60*room_speed);
mp_setType("playerName",mp_type.SMART);
mp_add("controls","pressed_jump,pressed_left,pressed_right",buffer_bool,1);


/** 
 * By the way:
 * Our object player is persistent. That means it will travel through rooms without getting destroyed.
 * Non local players however WILL get destroyed on changing the room.
 * This way, when entering a room, only our player will actually travel.
 * If you also want to sync non local players between rooms, see object obj_htme_time
 */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RETRIEVE VARIABLES FROM THE ENGINE
/** SADLY, due to current limitations in GML, we need to add all variables added to the
  * engine by using mp_add (mp_addBuiltin* are not needed to be added here!!).
  * Just use this as a template and copy it.
  *
  * More information in Begin Step. This here does the oposite, it sets the instance variables
  * to the variables stored in the engine.
  **/

self.name = mp_map_syncOut("name", self.name);
self.pressed_jump = mp_map_syncOut("pressed_jump", self.pressed_jump);
self.pressed_left = mp_map_syncOut("pressed_left", self.pressed_left);
self.pressed_right = mp_map_syncOut("pressed_right", self.pressed_right);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ADD VARIABLES TO THE ENGINE
/** SADLY, due to current limitations in GML, we need to add all variables added to the
  * engine by using mp_add. (and ONLY mp_add, mp_addPosition and similiar are 
  * resolved automatically!)
  * Just use this as a template and copy it.
  **/
  
/* You need to apply changes to your variables here aswell, before you sync them. 
 * If you need to change them during the step, cache them for the local player
 * and then sync them here. The multiplayer engine will not change the variables
 * for the local player, only retrieve them to send them to other players
 */
if (htme_isLocal()) {
    /** WRITES THE INPUTS FOR THE LOCAL PLAYER! These will be sent to all
      * other players as configured in the create event.
      *
      * Instead of check_pressed we use check for the jump, 
      * because the pressed frames could get lost due to network lagg 
      * which can cause desync and we don't want to use SMART or IMPORTANT
      * (see manual) packets here, because this needs to be fast!
      * This also means, our players can fly.
      * If you need keyboard_check_pressed sync keyboard_check instead and 
      * built your own function that simulates the pressed functions. 
      */
    self.pressed_jump = keyboard_check(vk_space);
    self.pressed_left = keyboard_check(ord('A'));
    self.pressed_right = keyboard_check(ord('D'));
}

/** THIS SYNCS THE VARIABLES WITH THE ENGINE
  * Add every variable synced via mp_add here!
  * DO NOT JUST DO THIS FOR THE LOCAL PLAYER! Do it for all!
  */
mp_map_syncIn("name",self.name);
mp_map_syncIn("pressed_jump",self.pressed_jump);
mp_map_syncIn("pressed_left",self.pressed_left);
mp_map_syncIn("pressed_right",self.pressed_right);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
friction = 0.5;

vspeed += 1

inst =  instance_place(x,y,obj_Falle1)
if place_meeting(x,y,obj_Falle1)
{
    
             
             instance_create(x - (sprite_get_width(spr_Falle1_static_Active)*0.2/2)  , y + (sprite_get_height(spr_Falle1_static_Active)*0.2/2), obj_Falle1_active)
            with(inst) instance_destroy()
trapped = 1;
friction = 1000; //Hohe friction



}
 

if keyboard_check(vk_anykey  &amp;&amp; trapped == 0)
{
   
     if keyboard_check_pressed(ord('Q'))
    {
     
        if (inventory[global.activeinv, 1] != 0)
        {
            if (lookdirection == -1)
            {
                if place_free(x-32,y)
                {
                      
                    mp_sync();
                    mp_add("Instances"," " + instances[ic] + " ",buffer_string,2*room_speed);;
                    instances[ic] = instance_create(x + (lookdirection * 32), y, inventory[global.activeinv, 2]);
                    with (instances[ic])
                    {
                        speedthrow = -2
                        image_xscale = 0.2
                        image_yscale = 0.2
                    }
                
                   
                    if ( inventory[global.activeinv, 1] &gt; 0)
                    {
                        inventory[global.activeinv, 1] -= 1
                    }
                    else
                    {
                        inventory[global.activeinv, 0] = 0
                        inventory[global.activeinv, 2] = 0
                        inventory[global.activeinv, 3] = 0
                    }
                     
                    ic++
                }
            
            
            }
            
            if (lookdirection == 1)
            {
                if place_free(x+32,y)
                {
                      
                    
                    instances[ic] = instance_create(x + (lookdirection * 32), y, inventory[global.activeinv, 2]);
                    with (instances[ic])
                    {
                        speedthrow = 2
                        image_xscale = 0.2
                        image_yscale = 0.2
                    }
                
                    if ( inventory[global.activeinv, 1] &gt; 0)
                    {
                        inventory[global.activeinv, 1] -= 1
                    }
                    else
                    {
                        inventory[global.activeinv, 0] = 0
                        inventory[global.activeinv, 2] = 0
                        inventory[global.activeinv, 3] = 0
                    }
                    ic++
                }
            
            
            }
            
        }
    }  
        
    
    

    if (self.pressed_jump) //jump
    {
    
        if not place_free(x,y+1)
        {vspeed=-10}
        //vspeed = vspeed - walkingspeed; 
        //sprite_index = spr_test_walk_right
        image_speed = 0.2;
        
    }
    if keyboard_check(ord('S')) //Ducken
    {
        vspeed = vspeed + walkingspeed; 
        //sprite_index = spr_test_walk_right;    
        image_speed = 0.2;
    }
    if (self.pressed_left) //Links
    {
        hspeed = hspeed - walkingspeed; 
        //sprite_index = spr_test_walk_right;    
        image_speed = 0.2;
        lookdirection = -1;
    }
    if (self.pressed_right) //rechts
    {
        
        hspeed = hspeed + walkingspeed; 
        //sprite_index = spr_test_walk_right    
        image_speed = 0.2;
        lookdirection = 1;
    }
}
else 
{
    if (trapped == 1)
    {
        if (untrap &lt;= 25)
        {
            if (keyboard_check_pressed(vk_anykey))
            {
                untrap++;
            }
        }
        else
        {
            trapped = 0
            untrap = 0;
            if place_meeting(x,y,obj_Falle1_active)
            {
                inst = instance_place(x, y, obj_Falle1_active);
                with (inst) instance_destroy();
            }
        }
    }
    else
    {
    //sprite_index = spr_test_idle;  
    image_speed = 0.03;
    }
}

if mouse_wheel_down()
{
    if (global.activeinv &gt;0)
    {
        global.activeinv -= 1;
    }
    else
    {
        global.activeinv = 8;
    }
    
}
if mouse_wheel_up()
{
    if (global.activeinv &lt; 8)
    {
        global.activeinv += 1;
    }
    else
    {
        global.activeinv = 0;
    }
    
}




if place_free(x+hspeed,y) == false
{
    if hspeed &gt; 0
        move_contact_solid(0,-1)
    if hspeed &lt; 0
        move_contact_solid(180,-1)
hspeed = 0
}

if place_free(x,y+vspeed) == false{
    if vspeed &gt; 0
        move_contact_solid(270,-1)
    if vspeed &lt; 0
        move_contact_solid(90,-1)
vspeed = 0
}

if place_free(x+hspeed,y+vspeed) == false{
    hspeed = 0;
}

if (hspeed &gt; maxspeed)
{
    hspeed = maxspeed;
}
if (hspeed &lt; -maxspeed)
{
    hspeed = -maxspeed;
}

if device_mouse_check_button_pressed(0, mb_left)
{
    if (inventory[global.activeinv, 1] &gt; 0)
    {
        if (inventory[global.activeinv, 0] == 4 || inventory[global.activeinv, 0] == 3)
        {
           if (lookdirection == -1)
            {
                if place_free(x-32,y)
                {  
                    instances[ic] = instance_create(x + ((lookdirection * 32) - ((sprite_get_width(object_get_sprite(inventory[global.activeinv, 3]))*0.2)/2) ), y + ((sprite_get_height(object_get_sprite(inventory[global.activeinv, 3]))*0.2)/2), inventory[global.activeinv, 3]);
                    with (instances[ic])
                    {
                        
                        image_xscale = 0.2
                        image_yscale = 0.2
                        
                    }
                    
                     if ( inventory[global.activeinv, 1] &gt; 0)
                    {
                        inventory[global.activeinv, 1] -= 1
                    }
                    else
                    {
                        inventory[global.activeinv, 0] = 0
                        inventory[global.activeinv, 2] = 0
                        inventory[global.activeinv, 3] = 0
                    }
                    ic++
                    
                }
             }
             if (lookdirection == 1)
            {
                if place_free(x+32,y)
                {  
                    instances[ic] = instance_create(x + ((lookdirection * 32) - ((sprite_get_width(object_get_sprite(inventory[global.activeinv, 3]))*0.2)/2) ), y + ((sprite_get_height(object_get_sprite(inventory[global.activeinv, 3]))*0.2)/2), inventory[global.activeinv, 3]);
                    with (instances[ic])
                    {
                        
                        image_xscale = 0.2
                        image_yscale = 0.2
                        
                    }
                    
                     if ( inventory[global.activeinv, 1] &gt; 0)
                    {
                        inventory[global.activeinv, 1] -= 1
                    }
                    else
                    {
                        inventory[global.activeinv, 0] = 0
                        inventory[global.activeinv, 2] = 0
                        inventory[global.activeinv, 3] = 0
                    }
                    ic++
                    
                }
             }
        }
    
    }



}






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inventory Manager</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if place_meeting(x,y,obj_collect_Falle1)
{
    done = 0
     for (i = 0; i &lt; 9; i++)
    {
        if ((inventory[i, 0] == 3))
        {
            inventory[i, 1]++
            inst = instance_place(x, y, obj_collect_Falle1);
    
           with (inst) instance_destroy();
            done = 1
            break
        }
    }
    if(done == 0)
    {
        for (i = 0; i &lt; 9; i++)
        {
            if (inventory[i, 1] == 0)  
            {
                 inventory[i, 1] = -1
                inventory[i, 0] = 3
                inventory[i, 1] += 1
                inventory[i, 2] = obj_collect_Falle1
                inventory[i, 3] = obj_Falle1
                
            inst = instance_place(x, y, obj_collect_Falle1);
    
           with (inst) instance_destroy();
                break
            }
        }
    }
}

if place_meeting(x,y,obj_collect_Falle2)
{
    done = 0
     for (i = 0; i &lt; 9; i++)
    {
        if ((inventory[i, 0] == 4))
        {
            inventory[i, 1]++


            inst = instance_place(x, y, obj_collect_Falle2);
    
           with (inst) instance_destroy();

            
            done = 1
            break
        }
    }
    if(done == 0)
    {
        for (i = 0; i &lt; 9; i++)
        {
            if (inventory[i, 1] == 0)  
            {
                inventory[i, 0] = 4
                inventory[i, 1] = 1
                 inventory[i, 2] = obj_collect_Falle2
                 inventory[i, 3] = obj_Falle2

                inst = instance_place(x, y, obj_collect_Falle2);
    
                  with (inst) instance_destroy();

                
                break
            }
        }
    }
}

if place_meeting(x,y,obj_collect_Bomerang)
{

    for (i = 0; i &lt; 9; i++)
    {
        if (inventory[i, 1] == 0)  
        {
            inventory[i, 0] = 5
            inventory[i, 1] = 1
             inventory[i, 2] = obj_collect_Bomerang
            inst = instance_place(x, y, obj_collect_Bomerang);
    
             with (inst) instance_destroy();
            break
        }
    }
    
}

if place_meeting(x,y,obj_collect_Spitzhacke)
{

    for (i = 0; i &lt; 9; i++)
    {
        if (inventory[i, 1] == 0)  
        {
            inventory[i, 0] = 0
            inventory[i, 1] = 1
             inventory[i, 2] = obj_collect_Spitzhacke
inst = instance_place(x, y, obj_collect_Spitzhacke);
    
             with (inst) instance_destroy();
           
            
            break
        }
    }
    
}

if place_meeting(x,y,obj_collect_Sword)
{

    for (i = 0; i &lt; 9; i++)
    {
        if (inventory[i, 1] == 0)  
        {
            inventory[i, 0] = 2
            inventory[i, 1] = 1
             inventory[i, 2] = obj_collect_Sword
inst = instance_place(x, y, obj_collect_Sword);
    
             with (inst) instance_destroy();
            break
        }
    }
    
    
}

if place_meeting(x,y,obj_collect_Knife)
{

    for (i = 0; i &lt; 9; i++)
    {
        if (inventory[i, 1] == 0)  
        {
            inventory[i, 0] = 1
            inventory[i, 1] = 1
             inventory[i, 2] = obj_collect_Knife
                inst = instance_place(x, y, obj_collect_Knife);
    
             with (inst) instance_destroy();
            break
        }
    }
    
    
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement Managr</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_invindicate, 0, view_xview + global.activeinv *150 + 150 -(sprite_get_width(spr_invindicate)/2 ), view_yview +  1080 - (sprite_get_height(spr_invindicate)/2))//- (sprite_get_height(spr_invindicate)/2)
//global.activeinv *150+150- (sprite_get_width(spr_invindicate)/2 )
draw_self();
for (i = 0; i &lt; 9; i++)
{
  if (inventory[i, 1] &gt;= 1)  
  {
    //draw_text(100, 100, inventory[i, 0]])
    draw_sprite(spr_inventory, inventory[i, 0],view_xview + i*150+150 - (sprite_get_width(spr_inventory)/2), view_yview +  1080 - (sprite_get_height(spr_inventory)/2)) 
    if (inventory[i, 1] &gt; 1)
    {
        draw_text(i*100, 200, inventory[i, 1])
    }
    
  
  }
}


if (trapped == 1)
    {
        draw_text(100, 100, "Press 'Any key' to struggle")
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw nameplate
draw_set_color(image_blend);
draw_set_halign(fa_center);
draw_text(x,y-sprite_yoffset-5-string_height(self.name),self.name);
draw_set_halign(fa_left);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
