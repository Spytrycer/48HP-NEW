<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Mapwidth = 200;
Mapheight = 120;
Mapmiddle = Mapheight / 2;

Cursorheight = 100;
Curserwidth = 0;
Biomwidth = 30;
Blocksize = 32;
Blockspacing  = Blocksize;
var Map;
var currentcu

//Biom Flatland
Flat_Step_range1 = 0;
Flat_Step_range2 = 2;

//Biom Mountain
Moun_Step_range1 = 1;
Moun_Step_range2 = 3;

//Biom Gap
Gap_Step_range1 = 1;
Gap_Step_range2 = 3;


//Caves

randomize();

Cavechunk_size_width_range1 = 30;
Cavechunk_size_width_range2 = 60;
Cavechunk_size_height_range1 = (irandom(2)+12);
Cavechunk_size_height_range2 = (irandom(5)+15);
Cavechunk_tunnelsize_range1 = (irandom(3)+3);
Cavechunk_tunnelsize_range2 = (irandom(5)+5);

Cavechunk_movementrange = (irandom(3)+2);

//Trees
Treebiom_length_range1 = 12;
Treebiom_length_range2 = 24;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Generation</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Initialisiere alle felder mit 0;
//0 =&gt; Kein Block
//1 =&gt; Zeichne Block

var iwidth;
for (iwidth = 0; iwidth &lt; Mapwidth; iwidth += 1)
{
    var iheight;
    for(iheight = 0; iheight &lt; Mapheight; iheight += 1)
    {
        Map[iwidth,iheight] = 0;
    }
}


//Drawing Test

////////////////////////////////////////
//          Start generating          //

///////////////////////////
//    Drawing Surface    //

//random_set_seed(current_second*current_hour*current_minute/current_day);
randomize();

while(Curserwidth &lt; Mapwidth){
    var biomnumber = irandom(2);
    //show_message(biomnumber);
    
    //Check if its to low or to high
    //Manipulate Biom Randomness if its to low or to high
    if(Cursorheight &gt; (Mapheight * 0.8)){
        biomnumber = 2;      
    }
    if(Cursorheight &lt; (Mapheight * 0.2)){
        biomnumber = 1;
    }
    
    if(biomnumber == 0)
    {
        //show_message("Flatland");
        repeat(Biomwidth)
        {
            //Flatland
            // 80% Staying same level
            // 10% going up
            // 10% going down
            chance = irandom(9);
            if(chance == 8)
            {
                //show_message(irandom(Flat_Step_range2-Flat_Step_range1) + Flat_Step_range1)
            
                //up
                Cursorheight = Cursorheight + (irandom(Flat_Step_range2-Flat_Step_range1) + Flat_Step_range1);
                
                
            }else if (chance == 9)
            {
                //show_message(irandom(Flat_Step_range2-Flat_Step_range1) + Flat_Step_range1)
                //down
                Cursorheight = Cursorheight - (irandom(Flat_Step_range2-Flat_Step_range1) + Flat_Step_range1);
                if (Cursorheight &lt; 0) Cursorheight = 0;
                
            }else{
                //samelevel
                
            }
            Map[Curserwidth,Cursorheight] = 1;
            
            //Drawing down
            for(i = Cursorheight; i &lt; Mapheight; i++){
                Map[Curserwidth,i] = 1;
            }
            
            
            //show_message(Curserwidth);
            //show_message(Cursorheight);
            //show_message(Map[Curserwidth,Cursorheight])
            Curserwidth++;
        }
    }else if (biomnumber == 1)
    {
        //show_message("Mountan");
        repeat(Biomwidth)
        {
            
        
            //Mountan
            // 20% Staying same level
            // 60% going up
            // 20% going down
            chance = irandom(9);
            if(chance == 7 or chance == 6)
            {
                //samelevel
                
            
            }else if (chance == 9 or chance == 8)
            {
                //down
                Cursorheight = Cursorheight - (irandom(Moun_Step_range2-Moun_Step_range1) + Moun_Step_range1);
                if (Cursorheight &lt; 0) Cursorheight = 0;
                
            }else{
                //up
                Cursorheight = Cursorheight + (irandom(Moun_Step_range2-Moun_Step_range1) + Moun_Step_range1);
                
            }
            Map[Curserwidth,Cursorheight] = 1;
            
            //Drawing down
            for(i = Cursorheight; i &lt; Mapheight; i++){
                Map[Curserwidth,i] = 1;
            }
            
            Curserwidth++;
        }
    }else if (biomnumber == 2)
    {
        //Gap
        //show_message("Gap");
        repeat(Biomwidth)
        {
            
        
            //Gap
            // 20% Staying same level
            // 20% going up
            // 60% going down
            chance = irandom(9);
            if(chance == 7 or chance == 6)
            {
                //samelevel
                
            
            }else if (chance == 9 or chance == 8)
            {
               //up
                Cursorheight = Cursorheight + (irandom(Gap_Step_range2-Gap_Step_range1) + Gap_Step_range1);
                
                
            }else{
                //down
                Cursorheight = Cursorheight - (irandom(Gap_Step_range2-Gap_Step_range1) + Gap_Step_range1);
                if (Cursorheight &lt; 0) Cursorheight = 0;
            }
            Map[Curserwidth,Cursorheight] = 1;
            
            //Drawing down
            for(i = Cursorheight; i &lt; Mapheight; i++){
                Map[Curserwidth,i] = 1;
            }
            
            Curserwidth++;
        }
    }
}

//    Drawing Surface    //
///////////////////////////

/////////////////////////
//    Drawing Caves    //

//Reset the Cursor
Curserwidth = 0;
Cursorheight = Cavechunk_size_height_range1;

var cavechunk_width = 0;


while(Cursorheight &lt; Mapheight)
{
    /*show_message("Curserheight");
    show_message(Cursorheight);

    show_message("Curserwidth");
    show_message(Curserwidth)*/
    
    if(Curserwidth &gt;= Mapwidth){
        Curserwidth = 0;
        Cursorheight = Cursorheight + (irandom(Cavechunk_size_height_range2-Cavechunk_size_height_range1)+Cavechunk_size_height_range1);
    }
    cavechunk_width = Curserwidth + (irandom(Cavechunk_size_width_range2-Cavechunk_size_width_range1) + Cavechunk_size_width_range1)
    
    if(irandom(1) == 0){ //50% Chance
        for(i = Curserwidth; i &lt; cavechunk_width; i++){
        
            Map[Curserwidth,Cursorheight] = 0;
            
            drawtop = Cursorheight + (irandom(Cavechunk_tunnelsize_range2-Cavechunk_tunnelsize_range1) + Cavechunk_tunnelsize_range1)
            for(x = Cursorheight; x &lt; drawtop; x++){
                Map[Curserwidth,x] = 0;
            }
            
            drawbottom = Cursorheight - (irandom(Cavechunk_tunnelsize_range2-Cavechunk_tunnelsize_range1) + Cavechunk_tunnelsize_range1)
            for(x = Cursorheight; x &gt; drawtop; x--){
                Map[Curserwidth,x] = 0;
            }
            
            //Test
            //Cursorheight = Cursorheight + irandom(Cavechunk_movementrange);
            
            if (irandom(1) == 0)
            {
                Cursorheight_temp = Cursorheight + irandom(Cavechunk_movementrange)
                //correct the way that it is passeble
                for(x = Cursorheight; x &lt; Cursorheight_temp; x++){
                    Map[Curserwidth,x] = 0;
                }
                Cursorheight = Cursorheight_temp;
            }else
            {
                Cursorheight_temp = Cursorheight - irandom(Cavechunk_movementrange)
                if(Cursorheight_temp &gt;= 0){
                    //correct the way that it is passeble
                    for(x = Cursorheight; x &gt; Cursorheight_temp; x--){
                        Map[Curserwidth,x] = 0;
                    }
                    Cursorheight = Cursorheight_temp;
                }
                
            }
            
            Curserwidth++;
            
        }
    }
    else
    {
        Curserwidth = cavechunk_width
    }
}

//    Drawing Caves    //
/////////////////////////


/////////////////////////////////////////
//    Drawing Gras &amp; Trees $ Bushes    //

var treebiom_bool;
var treebiom_length = 0;

//Start Drawing
var xheight;
for(xheight = 0; xheight &lt; Mapheight; xheight += 1)
{
    var xwidth;
    for (xwidth = 0; xwidth &lt; Mapwidth; xwidth += 1)
    {
        //is it a block
        if(Map[xwidth,xheight]==1){
            //////////////
            //   Gras   //
            //ist Top out of range?
            if((xheight-1)&gt;0){
                //is there no block on top
                if(Map[xwidth,xheight-1]==0){
                    //Gras
                    Map[xwidth,xheight-1]=2
                }
            }
            //   Gras   //
            //////////////
            
            
            ////////////////
            //   Bäume   //
            if(treebiom_length &lt;= 0){
                treebiom_bool = (irandom(1)==0);
                treebiom_length = irandom(Treebiom_length_range2-Treebiom_length_range1)-Treebiom_length_range1;
            }

            //Is there a block left and right 
            if((xwidth-1)&gt;0 and (xwidth+1)&lt;Mapwidth){
                //Is there at least one space up
                if((xheight-1)&gt;0){
                    //ist links und rechts von mir ein Block
                    if(Map[xwidth-1,xheight]==1 and Map[xwidth+1,xheight]==1){
                        //ist obenlink, obenrechts, und oben frei? (Gras oder leer)
                        if(Map[xwidth-1,xheight-1]==0 or Map[xwidth-1,xheight-1]==2
                        and Map[xwidth+1,xheight-1]==0 or Map[xwidth+1,xheight-1]==2
                        and Map[xwidth+0,xheight-1]==0 or Map[xwidth+0,xheight-1]==2
                        )
                        {
                            if(treebiom_bool){
                                //Setzte da oben eine Pflaze //Hier muss 50 50 busch oder baum hin
                                Map[xwidth+1,xheight-1] = 3
                                treebiom_length--
                            }else{
                                treebiom_length--
                            }
                        }
                    }   
                }
            }
            //   Bäume   //
            ///////////////
            
            ///////////////
            //   Bush    //
            
            //Is there a block left and right 
            if((xwidth-1)&gt;0 and (xwidth+1)&lt;Mapwidth){
                //Is there at least one space up
                if((xheight-1)&gt;0){
                    //ist links und rechts von mir ein Block
                    if(Map[xwidth-1,xheight]==1 and Map[xwidth+1,xheight]==1){
                        //ist obenlink, obenrechts, und oben frei? (Gras oder leer)
                        if(Map[xwidth-1,xheight-1]==0 or Map[xwidth-1,xheight-1]==2
                        and Map[xwidth+1,xheight-1]==0 or Map[xwidth+1,xheight-1]==2
                        and Map[xwidth+0,xheight-1]==0 or Map[xwidth+0,xheight-1]==2
                        )
                        {
                            //Setzte da oben eine Pflaze //Hier muss 50 50 busch oder baum hin
                            if(irandom(100)&lt;= 20){
                                Map[xwidth+1,xheight-1] = 4
                            }
                        }
                    }   
                }
            }
            
            //   Bush    //
            ///////////////
            
            
        }
    }
}

//    Drawing Gras &amp; Trees $ Bushes    //
/////////////////////////////////////////

//          Start generating          //
////////////////////////////////////////


//Start Drawing
var xheight;
for(xheight = 0; xheight &lt; Mapheight; xheight += 1)
{
    var xwidth;
    for (xwidth = 0; xwidth &lt; Mapwidth; xwidth += 1)
    {
        // 0 = no block
        // 1 = normal block
        // 2 = Gras
        // 3 = Tree
        // 4 = Bush
        // 5 = Item + Gras //=&gt; Random Item
    
        coordinate_x = (xwidth+1) * Blockspacing;
        coordinate_y = (xheight+1) * Blockspacing;
        
        if(Map[xwidth,xheight] == 1) 
        {
            instance_create(coordinate_x, coordinate_y, obj_block_test);
        }
        else if (Map[xwidth,xheight] == 2)
        {
            instance_create(coordinate_x, coordinate_y, obj_Gras);
        }
        else if (Map[xwidth,xheight] == 3)
        {
            if(xheight &lt;= (Mapheight*0.8)){
                if(irandom(100) &lt;= 60){
                    treechance = irandom(100);
                    if(treechance &lt;= 50){
                        instance_create(coordinate_x, coordinate_y, obj_Tree);
                    }else if(treechance &gt;= 50 and treechance &lt;= 92){
                        instance_create(coordinate_x, coordinate_y, obj_Tree_Medium);
                    }else{
                        instance_create(coordinate_x, coordinate_y, obj_Tree_Big);
                    }
                }
            }
        }
        else if (Map[xwidth,xheight] == 4){
            instance_create(coordinate_x, coordinate_y, obj_Bush);
        }
    }
}

//Save 5 Layers //Under Generation
for (xwidth = 0; xwidth &lt; Mapwidth; xwidth += 1)
{
    for(i = Mapheight; i &lt; (Mapheight + 5); i++){
        coordinate_x = (xwidth+1) * Blockspacing;
        coordinate_y = (i+1) * Blockspacing;
        instance_create(coordinate_x, coordinate_y, obj_block_test);
    }
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
