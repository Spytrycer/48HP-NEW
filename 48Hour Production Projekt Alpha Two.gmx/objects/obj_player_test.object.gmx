<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player_test</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>walkingspeed = 1;
maxspeed = 5;
lookdirection = 1;
instances[0] = 0;
ic = 0;
trapped = 0;
untrap = 0;

inventory[0,0] = 0
inventory[1,0] = 0
inventory[2,0] = 0
inventory[3,0] = 0
inventory[4,0] = 0
inventory[5,0] = 0
inventory[6,0] = 0
inventory[7,0] = 0
inventory[8,0] = 0


//set amount to 0
inventory[0,1] = 0
inventory[1,1] = 0
inventory[2,1] = 0
inventory[3,1] = 0
inventory[4,1] = 0
inventory[5,1] = 0
inventory[6,1] = 0
inventory[7,1] = 0
inventory[8,1] = 0

var base_w = 1920;
var base_h = 1080;
var max_w = display_get_width();
var max_h = display_get_height();
var aspect = display_get_width() / display_get_height();
var global.VIEW_HEIGHT = 0;
var global.VIEW_WIDTH = 0;
if (max_w &lt; max_h)
    {
    // portait
    global.VIEW_WIDTH = min(base_w, max_w);
    global.VIEW_HEIGHT = global.VIEW_WIDTH / aspect;
    }
else
    {
    // landscape
    global.VIEW_HEIGHT = min(base_h, max_h);
    global.VIEW_WIDTH = global.VIEW_HEIGHT * aspect;
    }
    
    
global.activeinv = 0;    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
friction = 0.5;

vspeed += 1

inst =  instance_place(x,y,obj_Falle1)
if place_meeting(x,y,obj_Falle1)
{
    
             
             instance_create(x - (sprite_get_width(spr_Falle1_static_Active)*0.2/2)  , y + (sprite_get_height(spr_Falle1_static_Active)*0.2/2), obj_Falle1_active)
            with(inst) instance_destroy()
trapped = 1;
friction = 1000; //Hohe friction



}
 

if keyboard_check(vk_anykey  &amp;&amp; trapped == 0)
{
   
     if keyboard_check_pressed(ord('Q'))
    {
     
        if (inventory[global.activeinv, 1] != 0)
        {
            if (lookdirection == -1)
            {
                if place_free(x-32,y)
                {
                      
                    
                    instances[ic] = instance_create(x + (lookdirection * 32), y, inventory[global.activeinv, 2]);
                    with (instances[ic])
                    {
                        speedthrow = -2
                        image_xscale = 0.2
                        image_yscale = 0.2
                    }
                
                   
                    if ( inventory[global.activeinv, 1] &gt; 0)
                    {
                        inventory[global.activeinv, 1] -= 1
                    }
                    else
                    {
                        inventory[global.activeinv, 0] = 0
                        inventory[global.activeinv, 2] = 0
                        inventory[global.activeinv, 3] = 0
                    }
                     
                    ic++
                }
            
            
            }
            
            if (lookdirection == 1)
            {
                if place_free(x+32,y)
                {
                      
                    
                    instances[ic] = instance_create(x + (lookdirection * 32), y, inventory[global.activeinv, 2]);
                    with (instances[ic])
                    {
                        speedthrow = 2
                        image_xscale = 0.2
                        image_yscale = 0.2
                    }
                
                    if ( inventory[global.activeinv, 1] &gt; 0)
                    {
                        inventory[global.activeinv, 1] -= 1
                    }
                    else
                    {
                        inventory[global.activeinv, 0] = 0
                        inventory[global.activeinv, 2] = 0
                        inventory[global.activeinv, 3] = 0
                    }
                    ic++
                }
            
            
            }
            
        }
    }  
        
    
    

    if (keyboard_check(vk_space)) //jump
    {
    
        if not place_free(x,y+1)
        {vspeed=-30}
        //vspeed = vspeed - walkingspeed; 
        //sprite_index = spr_test_walk_right
        image_speed = 0.2;
        
    }
    if keyboard_check(ord('S')) //Ducken
    {
        vspeed = vspeed + walkingspeed; 
        //sprite_index = spr_test_walk_right;    
        image_speed = 0.2;
    }
    if keyboard_check(ord('A')) //Links
    {
        hspeed = hspeed - walkingspeed; 
        //sprite_index = spr_test_walk_right;    
        image_speed = 0.2;
        lookdirection = -1;
    }
    if keyboard_check(ord('D')) //rechts
    {
        
        hspeed = hspeed + walkingspeed; 
        //sprite_index = spr_test_walk_right    
        image_speed = 0.2;
        lookdirection = 1;
    }
}
else 
{
    if (trapped == 1)
    {
        if (untrap &lt;= 25)
        {
            if (keyboard_check_pressed(vk_anykey))
            {
                untrap++;
            }
        }
        else
        {
            trapped = 0
            untrap = 0;
            if place_meeting(x,y,obj_Falle1_active)
            {
                inst = instance_place(x, y, obj_Falle1_active);
                with (inst) instance_destroy();
            }
        }
    }
    else
    {
    //sprite_index = spr_test_idle;  
    image_speed = 0.03;
    }
}

if mouse_wheel_down()
{
    if (global.activeinv &gt;0)
    {
        global.activeinv -= 1;
    }
    else
    {
        global.activeinv = 8;
    }
    
}
if mouse_wheel_up()
{
    if (global.activeinv &lt; 8)
    {
        global.activeinv += 1;
    }
    else
    {
        global.activeinv = 0;
    }
    
}




if place_free(x+hspeed,y) == false
{
    if hspeed &gt; 0
        move_contact_solid(0,-1)
    if hspeed &lt; 0
        move_contact_solid(180,-1)
hspeed = 0
}

if place_free(x,y+vspeed) == false{
    if vspeed &gt; 0
        move_contact_solid(270,-1)
    if vspeed &lt; 0
        move_contact_solid(90,-1)
vspeed = 0
}

if place_free(x+hspeed,y+vspeed) == false{
    hspeed = 0;
}

if (hspeed &gt; maxspeed)
{
    hspeed = maxspeed;
}
if (hspeed &lt; -maxspeed)
{
    hspeed = -maxspeed;
}

if device_mouse_check_button_pressed(0, mb_left)
{
    if (inventory[global.activeinv, 1] &gt; 0)
    {
        if (inventory[global.activeinv, 0] == 4 || inventory[global.activeinv, 0] == 3)
        {
           if (lookdirection == -1)
            {
                if place_free(x-32,y)
                {  
                    instances[ic] = instance_create(x + ((lookdirection * 32) - ((sprite_get_width(object_get_sprite(inventory[global.activeinv, 3]))*0.2)/2) ), y + ((sprite_get_height(object_get_sprite(inventory[global.activeinv, 3]))*0.2)/2), inventory[global.activeinv, 3]);
                    with (instances[ic])
                    {
                        
                        image_xscale = 0.2
                        image_yscale = 0.2
                        
                    }
                    
                     if ( inventory[global.activeinv, 1] &gt; 0)
                    {
                        inventory[global.activeinv, 1] -= 1
                    }
                    else
                    {
                        inventory[global.activeinv, 0] = 0
                        inventory[global.activeinv, 2] = 0
                        inventory[global.activeinv, 3] = 0
                    }
                    ic++
                    
                }
             }
             if (lookdirection == 1)
            {
                if place_free(x+32,y)
                {  
                    instances[ic] = instance_create(x + ((lookdirection * 32) - ((sprite_get_width(object_get_sprite(inventory[global.activeinv, 3]))*0.2)/2) ), y + ((sprite_get_height(object_get_sprite(inventory[global.activeinv, 3]))*0.2)/2), inventory[global.activeinv, 3]);
                    with (instances[ic])
                    {
                        
                        image_xscale = 0.2
                        image_yscale = 0.2
                        
                    }
                    
                     if ( inventory[global.activeinv, 1] &gt; 0)
                    {
                        inventory[global.activeinv, 1] -= 1
                    }
                    else
                    {
                        inventory[global.activeinv, 0] = 0
                        inventory[global.activeinv, 2] = 0
                        inventory[global.activeinv, 3] = 0
                    }
                    ic++
                    
                }
             }
        }
    
    }



}






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inventory Manager</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if place_meeting(x,y,obj_collect_Falle1)
{
    done = 0
     for (i = 0; i &lt; 9; i++)
    {
        if ((inventory[i, 0] == 3))
        {
            inventory[i, 1]++
            inst = instance_place(x, y, obj_collect_Falle1);
    
           with (inst) instance_destroy();
            done = 1
            break
        }
    }
    if(done == 0)
    {
        for (i = 0; i &lt; 9; i++)
        {
            if (inventory[i, 1] == 0)  
            {
                inventory[i, 0] = 3
                inventory[i, 1] += 1
                inventory[i, 2] = obj_collect_Falle1
                inventory[i, 3] = obj_Falle1
                
            inst = instance_place(x, y, obj_collect_Falle1);
    
           with (inst) instance_destroy();
                break
            }
        }
    }
}

if place_meeting(x,y,obj_collect_Falle2)
{
    done = 0
     for (i = 0; i &lt; 9; i++)
    {
        if ((inventory[i, 0] == 4))
        {
            inventory[i, 1]++


            inst = instance_place(x, y, obj_collect_Falle2);
    
           with (inst) instance_destroy();

            
            done = 1
            break
        }
    }
    if(done == 0)
    {
        for (i = 0; i &lt; 9; i++)
        {
            if (inventory[i, 1] == 0)  
            {
                inventory[i, 0] = 4
                inventory[i, 1] = 1
                 inventory[i, 2] = obj_collect_Falle2
                 inventory[i, 3] = obj_Falle2

                inst = instance_place(x, y, obj_collect_Falle2);
    
                  with (inst) instance_destroy();

                
                break
            }
        }
    }
}

if place_meeting(x,y,obj_collect_Bomerang)
{

    for (i = 0; i &lt; 9; i++)
    {
        if (inventory[i, 1] == 0)  
        {
            inventory[i, 0] = 5
            inventory[i, 1] = 1
             inventory[i, 2] = obj_collect_Bomerang
            inst = instance_place(x, y, obj_collect_Bomerang);
    
             with (inst) instance_destroy();
            break
        }
    }
    
}

if place_meeting(x,y,obj_collect_Spitzhacke)
{

    for (i = 0; i &lt; 9; i++)
    {
        if (inventory[i, 1] == 0)  
        {
            inventory[i, 0] = 0
            inventory[i, 1] = 1
             inventory[i, 2] = obj_collect_Spitzhacke
inst = instance_place(x, y, obj_collect_Spitzhacke);
    
             with (inst) instance_destroy();
           
            
            break
        }
    }
    
}

if place_meeting(x,y,obj_collect_Sword)
{

    for (i = 0; i &lt; 9; i++)
    {
        if (inventory[i, 1] == 0)  
        {
            inventory[i, 0] = 2
            inventory[i, 1] = 1
             inventory[i, 2] = obj_collect_Sword
inst = instance_place(x, y, obj_collect_Sword);
    
             with (inst) instance_destroy();
            break
        }
    }
    
    
}

if place_meeting(x,y,obj_collect_Knife)
{

    for (i = 0; i &lt; 9; i++)
    {
        if (inventory[i, 1] == 0)  
        {
            inventory[i, 0] = 1
            inventory[i, 1] = 1
             inventory[i, 2] = obj_collect_Knife
                inst = instance_place(x, y, obj_collect_Knife);
    
             with (inst) instance_destroy();
            break
        }
    }
    
    
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement Managr</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_invindicate, 0, view_xview + global.activeinv *150 + 150 -(sprite_get_width(spr_invindicate)/2 ), view_yview +  1080 - (sprite_get_height(spr_invindicate)/2))//- (sprite_get_height(spr_invindicate)/2)
//global.activeinv *150+150- (sprite_get_width(spr_invindicate)/2 )
draw_self();
for (i = 0; i &lt; 9; i++)
{
  if (inventory[i, 1] &gt;= 1)  
  {
    //draw_text(100, 100, inventory[i, 0]])
    draw_sprite(spr_inventory, inventory[i, 0],view_xview + i*150+150 - (sprite_get_width(spr_inventory)/2), view_yview +  1080 - (sprite_get_height(spr_inventory)/2)) 
    if (inventory[i, 1] &gt; 1)
    {
        draw_text(i*100, 200, inventory[i, 1])
    }
    
  
  }
}


if (trapped == 1)
    {
        draw_text(100, 100, "Press 'Any key' to struggle")
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
